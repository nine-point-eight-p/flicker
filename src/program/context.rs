use ahash::{HashMap, HashSet, RandomState};
use uuid::Uuid;

use super::{
    call::{Arg, Call, DataArg},
    metadata::SyscallMetadata,
    syscall::{Syscall, Type},
};

pub struct Context {
    /// Metadata of syscalls
    metadata: SyscallMetadata,
    /// Result values generated by existing calls
    results: HashMap<Uuid, Type>,
    /// Set of strings that have been generated
    strings: HashSet<String>,
    /// Set of filenames that have been generated
    filenames: HashSet<String>,
    /// Whether a resource is being generated
    pub generating_resource: bool,
}

impl Context {
    pub fn new(metadata: SyscallMetadata) -> Self {
        let hash_builder = RandomState::with_seeds(0, 0, 0, 0);
        Self {
            metadata,
            strings: HashSet::with_hasher(hash_builder.clone()),
            results: HashMap::with_hasher(hash_builder.clone()),
            filenames: HashSet::with_hasher(hash_builder),
            generating_resource: false,
        }
    }

    pub fn with_calls(metadata: SyscallMetadata, calls: &[Call]) -> Self {
        let syscall_return_types = HashMap::from_iter(
            metadata
                .syscalls()
                .iter()
                .filter_map(|s| s.return_type().map(|ty| (s.number(), ty))),
        );

        let hash_builder = RandomState::with_seeds(0, 0, 0, 0);
        let mut results = HashMap::with_hasher(hash_builder.clone());
        let mut strings = HashSet::with_hasher(hash_builder.clone());
        let mut filenames = HashSet::with_hasher(hash_builder);

        for call in calls {
            // Collect results
            if let Some(id) = call.result() {
                results.insert(id, syscall_return_types[&call.number()].clone());
            }

            // Collect strings and filenames
            let syscall = metadata.find_number(call.number()).unwrap();
            for (i, arg) in call.args().iter().enumerate() {
                match arg {
                    Arg::DataArg(DataArg::In(data)) => {
                        let ty = &syscall.fields()[i].ty;
                        // TODO: How to deal with null-terminate strings?
                        if ty.is_string() {
                            strings.insert(String::from_utf8(data.clone()).unwrap());
                        }
                        if ty.is_filename() {
                            filenames.insert(String::from_utf8(data.clone()).unwrap());
                        }
                    }
                    _ => {}
                }
            }
        }

        Self {
            metadata,
            results,
            strings,
            filenames,
            generating_resource: false,
        }
    }

    pub fn syscalls(&self) -> &[Syscall] {
        self.metadata.syscalls()
    }

    pub fn results(&self) -> impl Iterator<Item = (&Uuid, &Type)> {
        self.results.iter()
    }

    pub fn strings(&self) -> &HashSet<String> {
        &self.strings
    }

    pub fn filenames(&self) -> &HashSet<String> {
        &self.filenames
    }

    pub fn add_result(&mut self, ty: &Type) -> Uuid {
        let id = Uuid::new_v4();
        self.results.insert(id, ty.clone());
        id
    }
}
